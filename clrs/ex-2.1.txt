2.1-3
Write pseudocode for linear search, which scans through the sequence, looking for 'v'. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.

Pseudocode:
LINEAR SEARCH(A)
for i = 1 to A.length
	if A[i] == v
		return i
return nil

Proof:
Loop Invariant: At the start of each iteration, the subarray A[1..i-1] does not contain 'v'.
- Initialization: When i = 1, the subarray A[1..0] is not a valid subarray. So it suffices to say that 'v' is not contained in it.
- Maintenance: body of the for loop works by checking if the 'i'th element matches with 'v'. Incrementing i for the next iteration of the for loop then preserves the loop invariant.
- Termination: This can happen in 2 ways:
Abruptly if it finds the element in the ith iteration, during which the loop invariant still holds that the element was not found in the subarray A[1..i-1]
i > A.length, i.e i = n - 1. Substituting the same in the loop invariant we have that the subarray A[1..n] (i.e the entire array) does not contain 'v'. We conclude that the array does not contain the element 'v'.

===

2.1-4
Consider the problem of adding two n-bit binary integers, stored in two n-element arrays A and B. The sum of the two integers should be stored in binary form in an (n + 1)-element array C. State the problem formally and write pseudocode for adding the two integers.

Formal statement:
Combine two arrays, containing only 0's or 1's, by traversing from right-to-left. These are the rules for combination for 2 corresponding elements:
1. If either is 1 or 0 - The result is 1
2. If both are 0 - The result is 0
3. If both are 1 - 1 needs to carried over to the next iteration

Summation(i: 1->n+1) C[i] * 2^i-1 = Summation(j: 1->n) A[j] * 2^j-1 + Summation(k: 1->n) B[k] * 2^k-1

ADD-BINARY(A, B)
n = A.length
C = Array[n + 1]
carry = 0
for i = 1 to n
	C[i] = (A[i] + B[i] + carry) % 2
	carry = (A[i] + B[i] + carry) / 2
C[n + 1] = carry
return C