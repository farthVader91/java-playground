2.2-1
Express the function n3/1000 - 100n2 - 100n + 3 in terms of Big O-notation.

O(n^3)

===

2.2-2
Consider sorting n numbers stored in array A by first finding the smallest element of A and exchanging it with the element in A[1]. Then find the second smallest element of A, and exchange it with A[2]. Continue in this manner for the first n - 1 elements of A. Write pseudocode for this algorithm, which is known as selection sort. What loop invariant does this algorithm maintain? Why does it need to run for only the first n - 1 elements, rather than for all n elements? Give the best-case and worst-case running times of selection sort in Big O-notation.

SELECTION-SORT(A)
n = A.length
for j = 1 to n - 1
    smallest = A[j]
    for i = j + 1 to n
        smallest = min(smallest, A[i])
    swap smallest A[j]
return A

Loop invariant:
Before and after each loop iteration, the subarray A[1..j-1] contains j - 1 smallest elements in sorted order.

Initialization: A[1..0] is an invalid array.
Maintenance: The loop body finds the jth smallest element and places it at j. then increments j, thus satisfying the loop invariant.
Termination: When j = n; Substituting in the loop invariant we get: a[1..n-1] contains n - 1 smallest elements in sorted order, which leaves the largest element to already be in its proper place.

===

2.2-3
Consider linear search again (see Exercise 2.1-3). How many elements of the input sequence need to be checked on the average, assuming that the element being searched for is equally likely to be any element in the array? How about in the
worst case? What are the average-case and worst-case running times of linear search in Big O-notation? Justify your answers.

//
Assuming equal probability of occurrence 1/n, average number of elements which need to be checked is 1/n * (1 + 2 + ... +n) = (n+1)/2. Running time is Î˜(n)

Worst case, the element to search is dead l
//
(n + 1)/2 elements need to be checked on average.
n elements in the worst case.
Average Case running time: O(n) - Because it would result in n/2 comparisons.
Worst Case running time: O(n) - Because it would result in n comparisons.

===
2.2-4
How can we modify almost any algorithm to have a good best-case running time?


